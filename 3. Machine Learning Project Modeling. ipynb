{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20680,"status":"ok","timestamp":1700792686149,"user":{"displayName":"Abdul Sohail Ahmed","userId":"08519060920418493394"},"user_tz":480},"id":"6HT6xOMhRW4_","outputId":"3426ba7a-49b4-4651-9a9b-58189f928de9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eHL2bJ6D9uww"},"outputs":[],"source":["from imblearn.over_sampling import SMOTE\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","file_name = rf'/content/drive/MyDrive/Datasets/accepted_2007_to_2018Q4 cleaned encoded.csv'\n","loan_data_df = pd.read_csv(file_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zOmEeGKWjDAr"},"outputs":[],"source":["#######################################################################################################################\n","#Make new dataframe with only the encoded columns\n","\n","selected_columns = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","loan_data_df_encoded = loan_data_df[selected_columns]\n","\n","#######################################################################################################################\n","#Perform SMOTE supersampling to balance the loan_status target feature\n","\n","#Separate features and the target variable\n","features = loan_data_df_encoded.drop('loan_status_binary', axis=1)  # Drop the target column to isolate features\n","target = loan_data_df_encoded['loan_status_binary']  # Target variable\n","\n","#Split the data into training and testing sets\n","features_train, features_test, target_train, target_test = (\n","                    train_test_split(features, target, test_size=0.2, random_state=42))\n","\n","#Initialize the SMOTE object\n","smote = SMOTE(sampling_strategy='minority', random_state=42)  # Oversample the minority class\n","\n","#Apply SMOTE to the training data\n","features_train_SMOTE, target_train_SMOTE = smote.fit_resample(features_train, target_train)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"elapsed":746,"status":"ok","timestamp":1700793091105,"user":{"displayName":"Abdul Sohail Ahmed","userId":"08519060920418493394"},"user_tz":480},"id":"AN7wgCkLjFh2","outputId":"57c5f2aa-17b8-41aa-d23d-46cb65f3d85a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["#######################################################################################################################\n","#Plot the number of loan_status values before and after supersampling\n","\n","#Counting the instances of each unique loan status value before SMOTE\n","before_counts = target_train.value_counts()\n","\n","#Counting the instances of each unique loan status value after SMOTE\n","after_counts = target_train_SMOTE.value_counts()\n","\n","#Setting up the figure for plotting\n","plt.figure(figsize=(10, 5))\n","\n","#Plotting the bar chart for counts before SMOTE\n","plt.subplot(1, 2, 1)  # 1 row, 2 columns, 1st subplot\n","plt.bar(before_counts.index.astype(str), before_counts.values, color='blue', alpha=0.6)\n","plt.title('Before SMOTE')\n","plt.xlabel('Loan Status')\n","plt.ylabel('Count')\n","plt.xticks([str(i) for i in before_counts.index])  # Ensure correct x-tick labels\n","\n","#Plotting the bar chart for counts after SMOTE\n","plt.subplot(1, 2, 2)  # 1 row, 2 columns, 2nd subplot\n","plt.bar(after_counts.index.astype(str), after_counts.values, color='green', alpha=0.6)\n","plt.title('After SMOTE')\n","plt.xlabel('Loan Status')\n","plt.ylabel('Count')\n","plt.xticks([str(i) for i in after_counts.index])  # Ensure correct x-tick labels\n","\n","#Adjusting layout for better fit\n","plt.tight_layout()\n","\n","#Display the plot\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GUDosawvDdMv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700793614279,"user_tz":480,"elapsed":41149,"user":{"displayName":"Abdul Sohail Ahmed","userId":"08519060920418493394"}},"outputId":"a4b46b25-fb13-445d-8300-1023bf760ae1"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9749284027533538\n","Confusion Matrix:\n"," [[ 49039   8331]\n"," [  2647 377849]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.95      0.85      0.90     57370\n","           1       0.98      0.99      0.99    380496\n","\n","    accuracy                           0.97    437866\n","   macro avg       0.96      0.92      0.94    437866\n","weighted avg       0.97      0.97      0.97    437866\n","\n"]}],"source":["# Logistic Regression\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import pandas as pd\n","\n","# Assuming loan_data_df is your DataFrame containing the dataset\n","\n","# Select the columns for machine learning\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = ml_data.drop('loan_status_binary', axis=1)\n","y = ml_data['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the Logistic Regression model\n","logreg_model = LogisticRegression(random_state=42)\n","\n","# Fit the model on the training data\n","logreg_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = logreg_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","source":["# Logistic Regression (with SMOTE)\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import pandas as pd\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = features_train_SMOTE, features_test, target_train_SMOTE, target_test\n","\n","# Initialize the Logistic Regression model\n","logreg_model = LogisticRegression(random_state=42)\n","\n","# Fit the model on the training data\n","logreg_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = logreg_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eORktVXALOYs","executionInfo":{"status":"ok","timestamp":1700793683726,"user_tz":480,"elapsed":61333,"user":{"displayName":"Abdul Sohail Ahmed","userId":"08519060920418493394"}},"outputId":"188fd604-692d-4335-deef-1ce25bfd5b73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9679787880310414\n","Confusion Matrix:\n"," [[ 51839   5531]\n"," [  8490 372006]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.86      0.90      0.88     57370\n","           1       0.99      0.98      0.98    380496\n","\n","    accuracy                           0.97    437866\n","   macro avg       0.92      0.94      0.93    437866\n","weighted avg       0.97      0.97      0.97    437866\n","\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"23wSXOz4BVTE"},"outputs":[],"source":["# SVM\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Select the columns for machine learning\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = ml_data.drop('loan_status_binary', axis=1)\n","y = ml_data['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the SVM classifier\n","svm_model = SVC()\n","\n","# Fit the model on the training data\n","svm_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = svm_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3v3YrP0UBVW-"},"outputs":[],"source":["# KNN\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Select the columns for machine learning\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns]\n","\n","# Separate features and target variable\n","X = ml_data.drop('loan_status_binary', axis=1)\n","y = ml_data['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the KNN classifier\n","knn_model = KNeighborsClassifier()\n","\n","# Fit the model on the training data\n","knn_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = knn_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":685794,"status":"ok","timestamp":1700694911458,"user":{"displayName":"Sourab Rajendra Saklecha","userId":"17568088921842338742"},"user_tz":480},"id":"y-LSL0A9BVP9","outputId":"29a81dd8-dd85-4f27-bb95-dcb77077c053"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 0.9883868580798691\n","Confusion Matrix:\n"," [[ 52669   4701]\n"," [   384 380112]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.99      0.92      0.95     57370\n","           1       0.99      1.00      0.99    380496\n","\n","    accuracy                           0.99    437866\n","   macro avg       0.99      0.96      0.97    437866\n","weighted avg       0.99      0.99      0.99    437866\n","\n"]}],"source":["# Random Forest Model\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = loan_data_df_encoded.drop('loan_status_binary', axis=1)\n","y = loan_data_df_encoded['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the random forest classifier\n","rf_model = RandomForestClassifier()\n","\n","# Fit the model on the training data\n","rf_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = rf_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JivrB4gr_Jyy","outputId":"11f3ab5c-87ec-49ef-8491-d1402467cf26"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 0.988377722864986\n","Confusion Matrix:\n"," [[ 52651   4719]\n"," [   370 380126]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.99      0.92      0.95     57370\n","           1       0.99      1.00      0.99    380496\n","\n","    accuracy                           0.99    437866\n","   macro avg       0.99      0.96      0.97    437866\n","weighted avg       0.99      0.99      0.99    437866\n","\n"]}],"source":["# Stacking XGBoost (with Random Forest as Base Model)\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from xgboost import XGBClassifier\n","from sklearn.ensemble import StackingClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = loan_data_df_encoded.drop('loan_status_binary', axis=1)\n","y = loan_data_df_encoded['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the base models (Random Forest and XGBoost)\n","rf_model = RandomForestClassifier()\n","\n","# Initialize the StackingClassifier with Random Forest and XGBoost as base models\n","stacking_model = StackingClassifier(\n","    classifiers=[rf_model],\n","    meta_classifier=XGBClassifier(),\n","    use_probas=False,\n","    use_features_in_secondary=True\n",")\n","\n","# Fit the model on the training data\n","stacking_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = stacking_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ne-3h2mVAPKx"},"outputs":[],"source":["# Stacking AdaBoost (with Random Forest as Base Model)\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n","from sklearn.ensemble import StackingClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = loan_data_df_encoded.drop('loan_status_binary', axis=1)\n","y = loan_data_df_encoded['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the base model (Random Forest)\n","base_rf_model = RandomForestClassifier()\n","\n","# Initialize the StackingClassifier with Random Forest as the base model and AdaBoost as the meta-learner\n","stacking_model = StackingClassifier(\n","    classifiers=[base_rf_model],\n","    meta_classifier=AdaBoostClassifier(),\n","    use_probas=False,\n","    use_features_in_secondary=True\n",")\n","\n","# Fit the model on the training data\n","stacking_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = stacking_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","source":["# Stacking LightGBM (with Random Forest as Base Model)\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.ensemble import StackingClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = loan_data_df_encoded.drop('loan_status_binary', axis=1)\n","y = loan_data_df_encoded['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the base model (Random Forest)\n","base_rf_model = RandomForestClassifier()\n","\n","# Initialize the ensemble model (LightGBM)\n","lgbm_model = LGBMClassifier()\n","\n","# Initialize the StackingClassifier with Random Forest as the base model and LightGBM as the meta-learner\n","stacking_model = StackingClassifier(\n","    classifiers=[base_rf_model],\n","    meta_classifier=lgbm_model,\n","    use_probas=False,\n","    use_features_in_secondary=True\n",")\n","\n","# Fit the model on the training data\n","stacking_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = stacking_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"],"metadata":{"id":"2KX-3jQuIYbY"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"czj5Vfx3CPHe"},"outputs":[],"source":["# XGBoost\n","\n","from sklearn.model_selection import train_test_split\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Select the columns for machine learning\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = ml_data.drop('loan_status_binary', axis=1)\n","y = ml_data['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the XGBoost classifier\n","xgb_model = XGBClassifier()\n","\n","# Fit the model on the training data\n","xgb_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = xgb_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","source":["# Random Forest Model\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","selected_columns_ML = [\n","    \"purpose_car\",\n","    \"purpose_credit_card\",\n","    \"purpose_debt_consolidation\",\n","    \"purpose_house\",\n","    \"purpose_other\",\n","    \"loan_amnt_normalized\",\n","    \"term_binary\",\n","    \"days_since_issue_d_normalized\",\n","    \"installment_normalized\",\n","    \"int_rate_normalized\",\n","    \"grade_numerical\",\n","    \"sub_grade_numerical\",\n","    \"tot_cur_bal_normalized\",\n","    \"pymnt_plan_binary\",\n","    \"addr_state_encoded\",\n","    \"total_rec_int_normalized\",\n","    \"total_rec_late_fee_normalized\",\n","    \"total_rec_prncp_normalized\",\n","    \"out_prncp_normalized\",\n","    \"emp_title_encoded\",\n","    \"emp_length_numerical\",\n","    \"annual_inc_normalized\",\n","    \"ownership_MORTGAGE\",\n","    \"ownership_NONE\",\n","    \"ownership_OTHER\",\n","    \"ownership_OWN\",\n","    \"ownership_RENT\",\n","    \"delinq_2yrs_numerical\",\n","    \"inq_last_12m_numerical\",\n","    \"last_fico_range_low_numerical\",\n","    \"mort_acc_numerical\",\n","    \"mths_since_last_delinq_numerical\",\n","    \"num_actv_bc_tl_numerical\",\n","    \"open_il_12m_numerical\",\n","    \"tot_hi_cred_lim_normalized\",\n","    \"total_acc_numerical\",\n","    \"days_since_last_cred_pull_normalized\",\n","    \"loan_status_binary\"\n","]\n","\n","# Filter the dataset to include only the selected columns\n","ml_data = loan_data_df[selected_columns_ML]\n","\n","# Separate features and target variable\n","X = ml_data.drop('loan_status_binary', axis=1)\n","y = ml_data['loan_status_binary']\n","\n","# Split the dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","\"\"\"# Initialize the random forest classifier\n","rf_model = RandomForestClassifier()\n","\n","# Creating an instance of Random Forest Classifier with the specified hyperparameters\n","model = RandomForestClassifier(n_estimators=500, min_samples_split=2, min_samples_leaf=1,\n","                               max_features='auto', max_depth=20)\n","\n","\"\"\"\n","\n","# Creating an instance of Random Forest Classifier with the specified hyperparameters\n","rf_model = RandomForestClassifier(n_estimators=500, min_samples_split=2, min_samples_leaf=1,\n","                               max_features='auto', max_depth=20)\n","\n","\n","# Fit the model on the training data\n","rf_model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = rf_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","class_report = classification_report(y_test, y_pred)\n","\n","# Print the evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", class_report)\n","\n","\n"],"metadata":{"id":"ZMqMYnWm3U3F"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}